{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","about","onClick","togglemode","htmlFor","Textform","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","background","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newtext","split","join","length","About","backgroundColor","mystyle","setMystyle","_useState3","_useState4","btntext","setBtnText","data-bs-parent","border","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","setAlert","message","Router","body","Switch","Route","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.5bf1f262.chunk.js","sourcesContent":["import React from \"react\";\r\n// import PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.about}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.togglemode}\r\n              type=\"checkbox\"\r\n              //  role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable darkmode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// Navbar.PropTypes={title:PropTypes.string,\r\n//                   about:PropTypes.string}\r\n\r\n// Navbar.defaultprops={\r\n//   title:\"sanjay is good boy\",\r\n//   about:\"About us\"\r\n// }\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  const handleExtraspace = () => {\r\n    let newtext = text.split(/[ ]+/);\r\n    setText(newtext.join(\" \"));\r\n  };\r\n\r\n  const handleCopytext = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n  };\r\n\r\n  const handlecleartext = () => {\r\n    // console.log(\"uppercase was clicked\"+text);\r\n    let newText = \"\";\r\n\r\n    setText(newText);\r\n    props.showAlert(\"convert to cleartext!\", \"success\");\r\n  };\r\n\r\n  const handleUPclick = () => {\r\n    // console.log(\"uppercase was clicked\"+text);\r\n    let newText = text.toUpperCase();\r\n\r\n    setText(newText);\r\n    props.showAlert(\"converted to uppercase!\", \"success\");\r\n  };\r\n  const handleLOclick = () => {\r\n    // console.log(\"uppercase was clicked\"+text);\r\n    let newText = text.toLowerCase();\r\n\r\n    setText(newText);\r\n    props.showAlert(\"convert to lowercase!\", \"success\");\r\n  };\r\n  const handleonchange = (event) => {\r\n    // console.log(\"on change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"enter text here\");\r\n\r\n  // text=\"new text\";     wrong way to change the state\r\n  // setText=\"new text\";  right way to change the state\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"comtainer\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <div>\r\n          <h1>{props.heading}</h1>\r\n          <form>\r\n            <div className=\"mb-3\">\r\n              <label\r\n                htmlFor=\"exampleFormControlTextarea1\"\r\n                className=\"form-label\"\r\n              >\r\n                Example textarea\r\n              </label>\r\n              <textarea\r\n                className=\"form-control\"\r\n                style={{\r\n                  background: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n                  color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n                }}\r\n                value={text}\r\n                onChange={handleonchange}\r\n                id=\"myBox\"\r\n                rows=\"8\"\r\n              ></textarea>\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary mx-3\"\r\n              onClick={handleUPclick}\r\n            >\r\n              Convert to upercase\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary mx-3\"\r\n              onClick={handleLOclick}\r\n            >\r\n              Convert to lowercase\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary mx-3\"\r\n              onClick={handlecleartext}\r\n            >\r\n              clear text\r\n            </button>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary mx-3\"\r\n              onClick={handleCopytext}\r\n            >\r\n              Copy text\r\n            </button>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary mx-3\"\r\n              onClick={handleExtraspace}\r\n            >\r\n              Remove Extraspace\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>your text summery</h1>\r\n        <p>\r\n          {\" \"}\r\n          {text.split(\" \").length} words and {text.length} caracters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length}</p>\r\n        <h1>preview</h1>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  const [mystyle, setMystyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n  \r\n\r\n  const [btntext, setBtnText] = useState(\"Enable dark mode\");\r\n\r\n  const togglestyle = () => {\r\n    if (mystyle.color === \"black\") {\r\n      setMystyle({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n        border:\"1px solid white\"\r\n\r\n      });\r\n      setBtnText(\"Enable light mode\")\r\n    }\r\n    else{\r\n        setMystyle({\r\n            color: \"black\",\r\n            backgroundColor: \"white\"\r\n          });\r\n          setBtnText(\"Enable dark mode\")\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container my-5\" style={mystyle}>\r\n        <h1 className=\"my-3\">About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\" style={mystyle}>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n              <button\r\n                className=\"accordion-button\"\r\n                style={mystyle}\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\"\r\n              >\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              className=\"accordion-collapse collapse show\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classes that we use to style each element. These classes control\r\n                the overall appearance, as well as the showing and hiding via\r\n                CSS transitions. You can modify any of this with custom CSS or\r\n                overriding our default variables. It's also worth noting that\r\n                just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                style={mystyle}\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseTwo\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseTwo\"\r\n              >\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseTwo\"\r\n              className=\"accordion-collapse collapse\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                style={mystyle}\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseThree\"\r\n              >\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseThree\"\r\n              className=\"accordion-collapse collapse\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          onClick={togglestyle}\r\n          type=\"button\"\r\n          className=\"btn btn-primary my-3 \"\r\n        >\r\n          {btntext}\r\n        </button>\r\n        \r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    if (typeof word !== \"string\" || word.length === 0) {\r\n      return \"\";\r\n    }\r\n\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    <div\r\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n      role=\"alert\"\r\n    >\r\n      <strong> {capitalize(props.alert.type)}</strong> :{props.alert.msg}\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn-close\"\r\n        data-bs-dismiss=\"alert\"\r\n        aria-label=\"Close\"\r\n      ></button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./components/Textform\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n\n// this is old version for switch installation         npm install react-router-dom@5\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //wheter dark mode is enable or not\n  const [alert, setAlert] = useState(\"null\");\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    // setTimeout(() => {\n    //   setAlert(null);\n    // }, 1500);\n  };\n\n  const togglemode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.background = \"#042743\";\n      showAlert(\"Dark mode hase enabled\", \"success\");\n      document.title = \"Textutils-DarkMode\";\n\n      // setInterval(() => {\n      //   document.title = \"Textutils is Amazind Mode\";\n      // }, 2000);\n\n      // setInterval(() => {\n      //   document.title = \" Install Textutils Now\";\n      // }, 2500);\n    } else {\n      setMode(\"light\");\n      document.body.style.background = \"white\";\n      showAlert(\"Light mode hase enabled\", \"success\");\n      document.title = \"Textutils-LightMode\";\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar\n          title=\"textutlis2\"\n          about=\"About us\"\n          mode={mode}\n          togglemode={togglemode}\n        />\n        <Alert alert={alert} />\n\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n\n            {/* this is for exact command\n            users ---> component 1\n            users//home ---> component 2 */}\n\n            <Route exact path=\"/\">\n              <Textform\n                showAlert={showAlert}\n                heading=\"enter the text to analyze\"\n                mode={mode}\n              />\n            </Route>\n          </Switch>\n        </div>\n\n        {/* <About /> */}\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}